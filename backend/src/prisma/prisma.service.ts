import { Injectable, OnModuleInit, OnModuleDestroy, INestApplication } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  constructor() {
    super({
      log: ['query', 'info', 'warn', 'error'], // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—à–∏–±–æ–∫
    });
  }

  async onModuleInit(): Promise<void> {
    await this.$connect();
    console.log('‚úÖ Prisma –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }

  async onModuleDestroy(): Promise<void> {
    await this.$disconnect();
    console.log('üõë Prisma –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NestJS —Å Prisma.
   * –í—ã–∑—ã–≤–∞–π –≤ main.ts: await prismaService.enableShutdownHooks(app);
   */
  async enableShutdownHooks(app: INestApplication): Promise<void> {
    // <<< –í–û–¢ –≠–¢–ê –ü–†–ê–í–ö–ê >>> 
    (this as any).$on('beforeExit', async () => {
      await app.close();
    });
  }
}
