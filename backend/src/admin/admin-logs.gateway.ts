import {
  WebSocketGateway,
  WebSocketServer,
  OnGatewayInit,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, WebSocket } from 'ws'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ws, –Ω–µ socket.io!

@WebSocketGateway({
  namespace: '/admin/logs', // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è: ws://host:port/admin/logs
  cors: {
    origin: '*', // –õ—É—á—à–µ –ø–æ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    credentials: false,
  },
})
export class AdminLogsGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server?: Server;

  afterInit(server: Server) {
    console.log('[WS] /admin/logs initialized');
  }

  handleConnection(client: WebSocket) {
    console.log('[WS] –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ live-–ª–æ–≥–∞–º');
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ –≤–∫—É—Å—É)
    try {
      client.send('üü¢ Live-–ª–æ–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (e) {
      // ignore
    }
  }

  handleDisconnect(client: WebSocket) {
    console.log('[WS] –ö–ª–∏–µ–Ω—Ç live-–ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
  }

  // –í—ã–∑—ã–≤–∞–π —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ª–æ–≥–∞–º
  sendLog(message: string) {
    if (!this.server) return;
    for (const client of this.server.clients) {
      // –£ ws –µ—Å—Ç—å readyState –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)
      if (client.readyState === client.OPEN) {
        client.send(message);
      }
    }
  }
}
