import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { NotificationMessage } from './notification.model';
import { NotificationType, CreateNotificationDto } from './dto/create-notification.dto';
import { NotificationGateway } from './notification.gateway';
import { TelegramService } from '../telegram/telegram.service';
import { Role, Department } from '@prisma/client';

@Injectable()
export class NotificationService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly gateway: NotificationGateway,
    private readonly telegram: TelegramService,
  ) {}

  /**
   * –°–æ–∑–¥–∞—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —á–µ—Ä–µ–∑ WebSocket –∏ Telegram.
   */
  async create(payload: CreateNotificationDto) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if (payload.userId) {
      const user = await this.prisma.user.findUnique({
        where: { id: payload.userId },
      });
      if (!user) {
        throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥—Ä–µ—Å–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
    if (payload.role) {
      const validRoles: string[] = Object.values(Role);
      if (!validRoles.includes(payload.role as any)) {
        throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    }
    // ‚úÖ ENUM-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞!
    if (payload.department && !Object.values(Department).includes(payload.department as Department)) {
      throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç');
    }

    const notification = await this.prisma.notification.create({
      data: {
        userId: payload.userId,
        role: payload.role,
        department: payload.department as Department,
        title: payload.title,
        message: payload.message,
        type: payload.type,
        url: payload.url,
      },
    });

    const socketPayload: NotificationMessage = {
      id: notification.id,
      title: notification.title,
      message: notification.message,
      type: notification.type as NotificationType, // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
      url: notification.url ?? undefined,
      createdAt: notification.createdAt,
      isRead: notification.isRead,
    };

    // WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      if (payload.userId) {
        this.gateway.sendToUser(payload.userId, socketPayload);
      } else if (payload.role) {
        this.gateway.sendToRole(payload.role, socketPayload);
      } else if (payload.department) {
        this.gateway.sendToDepartment(payload.department, socketPayload);
      }
    } catch (err) {
      if (process.env.NODE_ENV !== 'production') {
        console.error('WebSocket send error:', err);
      }
    }

    // Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.telegram.sendFromNotification(notification).catch((err) => {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Telegram send error:', err);
      }
    });

    return notification;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID, —Ä–æ–ª–∏ –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É).
   */
  async getUserNotifications(userId: number) {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { role: true, department: true },
    });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    return this.prisma.notification.findMany({
      where: {
        OR: [
          { userId },
          { role: user.role ?? undefined },
          { department: user.department ?? undefined },
        ],
      },
      orderBy: { createdAt: 'desc' },
      take: 50,
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
   */
  async getUnreadCount(userId: number): Promise<{ count: number }> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { role: true, department: true },
    });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const count = await this.prisma.notification.count({
      where: {
        isRead: false,
        OR: [
          { userId },
          { role: user.role ?? undefined },
          { department: user.department ?? undefined },
        ],
      },
    });

    return { count };
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.
   */
  async markAsRead(id: string, userId: number) {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { role: true, department: true },
    });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const notification = await this.prisma.notification.findUnique({
      where: { id },
    });
    if (!notification) {
      throw new NotFoundException('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    const allowed =
      notification.userId === userId ||
      (notification.role && notification.role === user.role) ||
      (notification.department && notification.department === user.department);

    if (!allowed) {
      throw new ForbiddenException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
    }

    return this.prisma.notification.update({
      where: { id },
      data: { isRead: true },
    });
  }
}
